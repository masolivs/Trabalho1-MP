        -:    0:Source:romanos.cpp
        -:    1:// Copyright 2024 <Mariana Oliveira>
        -:    2:#include "./romanos.hpp"
        -:    3:#include <unordered_map>
        -:    4:#include <string>
        -:    5:
       19:    6:std::string ArabicoParaRomano(int numero) {
       19:    7:    if (numero <= 0 || numero >= 4000) {
    #####:    8:        return "Número inválido";
        -:    9:    }
        -:   10:    std::unordered_map<int, std::string> valores = {
    #####:   11:        {1, "I"}, {4, "IV"}, {5, "V"}, {9, "IX"},
    #####:   12:        {10, "X"}, {40, "XL"}, {50, "L"},
    #####:   13:        {90, "XC"}, {100, "C"}, {400, "CD"},
    #####:   14:        {500, "D"}, {900, "CM"}, {1000, "M"}
      285:   15:    };
       19:   16:    std::string romano = "";
       19:   17:    int base[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
      266:   18:    for (int converter : base) {
      278:   19:        while (numero >= converter) {
       31:   20:            romano += valores[converter];
       31:   21:            numero -= converter;
        -:   22:        }
        -:   23:    }
       19:   24:    return romano;
       19:   25:}
       20:   26:int converterRomanoParaArabico(const std::string& converter) {
        -:   27:    std::unordered_map<char, int> valores = {
        -:   28:        {'I', 1}, {'V', 5}, {'X', 10}, {'L', 50},
        -:   29:        {'C', 100}, {'D', 500}, {'M', 1000}
       20:   30:    };
       20:   31:    int total = 0;
       20:   32:    int ultimo_valor = 0;
       20:   33:    int repeticao = 0;
       63:   34:    for (int i = converter.size() - 1; i >= 0; i--) {
       44:   35:        int valor = valores[converter[i]];
       44:   36:        if (valor < ultimo_valor) {
       13:   37:            total -= valor;
       13:   38:            repeticao = 0;
        -:   39:        } else {
       31:   40:            if (valor == ultimo_valor) {
        6:   41:                repeticao++;
        6:   42:                if (repeticao > 3) {
        1:   43:                    return -1;
        -:   44:                }
        -:   45:            } else {
       25:   46:                repeticao = 1;
        -:   47:            }
       30:   48:            total += valor;
        -:   49:        }
       43:   50:        ultimo_valor = valor;
        -:   51:    }
       19:   52:    std::string converter_convertido = ArabicoParaRomano(total);
       19:   53:    if (converter == converter_convertido) {
       16:   54:        return total;
        -:   55:    } else {
        3:   56:        return -1;
        -:   57:    }
       20:   58:}
